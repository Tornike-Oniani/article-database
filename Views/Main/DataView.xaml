<UserControl x:Class="MainLib.Views.Main.DataView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:local="clr-namespace:MainLib.Views.Main"
             xmlns:properties="clr-namespace:MainLib.ViewModels.Properties;assembly=MainLib.ViewModels"
             xmlns:converters="clr-namespace:MainLib.Views.Converters"
             xmlns:commonConverters="clr-namespace:Lib.Views.Converters;assembly=Lib.Views"
             xmlns:ap="clr-namespace:Lib.Views.Attached_Properties;assembly=Lib.Views"
             xmlns:aps="clr-namespace:Lib.Styles.Attached_Properties;assembly=Lib.Styles"
             xmlns:usercontrols="clr-namespace:Lib.Views.UserControls;assembly=Lib.Views"
             xmlns:notifications="clr-namespace:NotificationService.Controls;assembly=NotificationService"
             mc:Ignorable="d" 
             Focusable="True"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <commonConverters:CheckToListConverter x:Key="CheckToList" />
        <commonConverters:ListToVisibilityConverter x:Key="ListToVisibility" />
        <commonConverters:NumberToSICConverter x:Key="NumberToSIC" />
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibility" />
        <converters:ActiveStatusToStyleConverter x:Key="ActiveStatusToStyle" />
        <converters:IsIntToBoolConverter x:Key="IsIntToBool" />
        <converters:ListCountToBoolConverter x:Key="ListCountToBool" />
        <converters:IntToVisibilityConverter x:Key="IntToVisibility" />
        <converters:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibility" />
        <converters:BoolToTextHeaderStyleConverter x:Key="BoolToTextHeaderStyle" />

        <Style x:Key="Ribbon" TargetType="{x:Type TabControl}">
            <Style.Resources>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Padding" Value="12 6 12 6" />
                    <Setter Property="Foreground" Value="{StaticResource WhiteColorBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Border
                                    Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    >
                                    <ContentPresenter ContentSource="Header" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource SecondaryColorDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource GrayColorLightBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource LabelColorBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
            <Setter Property="BorderThickness" Value="0 0 0 0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Border
                                Background="{StaticResource SecondaryColorBrush}"
                                Grid.Row="0"
                                >
                                <TabPanel IsItemsHost="True" />
                            </Border>

                            <Border
                                Background="{DynamicResource GrayColorLightBrush}"
                                Padding="6 6 6 6"
                                Grid.Row="1"
                                >
                                <ContentPresenter ContentSource="SelectedContent" />
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <UserControl.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="B" 
                    Command="{Binding DataContext.OpenBookmarkManagerCommand, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" 
                    CommandParameter="{Binding SelectedArticle}" />
        <KeyBinding Modifiers="Ctrl" Key="R" 
                    Command="{Binding DataContext.OpenReferenceManagerCommand, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" 
                    CommandParameter="{Binding SelectedArticle}" />
    </UserControl.InputBindings>

    <Grid Focusable="True">
        <Grid.Resources>
            <FrameworkElement x:Key="ProxyElement" DataContext="{Binding}" />
        </Grid.Resources>

        <Grid.RowDefinitions>
            <!-- Proxy column -->
            <RowDefinition Height="Auto" />
            <!-- Top menu column -->
            <RowDefinition Height="Auto" />
            <!-- Data grid column -->
            <RowDefinition Height="*" />
            <!-- Pagination column -->
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Proxy element to change datagrid columns' DataContext -->
        <ContentControl 
            Visibility="Collapsed" 
            Content="{StaticResource ProxyElement}" 
            Grid.Row="0" 
            />

        <!-- Ribbon -->
        <TabControl
            Style="{StaticResource Ribbon}"
            MinHeight="105"
            Grid.Row="1"
            >
            <!-- Search menu -->
            <TabItem Header="Search">
                <StackPanel 
                    Orientation="Horizontal"
                    VerticalAlignment="Center"
                    >
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Title"
                        MinWidth="250"
                        MaxWidth="300"
                        Margin="0 0 6 0"
                        />
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Authors"
                        Width="150"
                        Margin="0 0 6 0"
                        />
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Keywords"
                        Width="150"
                        Margin="0 0 6 0"
                        />
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Year"
                        Width="90"
                        Margin="0 0 6 0"
                        />
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Comment"
                        Width="100"
                        Margin="0 0 6 0"
                        />
                    <TextBox
                        Style="{StaticResource WatermarkTextBoxSmall}"
                        aps:TextBoxHelper.Watermark="Id"
                        Width="90"
                        Margin="0 0 6 0"
                        />
                    <Button
                        Content="Search"
                        />
                </StackPanel>
            </TabItem>
            <!-- View options -->
            <TabItem Header="View">
                <StackPanel 
                    Orientation="Horizontal"
                    VerticalAlignment="Center"
                    >
                    <RadioButton
                        Content="Compact&#x0a;View"
                        Tag="{x:Static materialDesign:PackIconKind.Text}"
                        GroupName="ViewType"
                        Style="{StaticResource RibbonRadioButtonIcon}"
                        Width="54"
                        Margin="0 0 6 0"
                        />
                    <RadioButton
                        Content="Full&#x0a;View"
                        Tag="{x:Static materialDesign:PackIconKind.TextBox}"
                        GroupName="ViewType"
                        Style="{StaticResource RibbonRadioButtonIcon}"
                        Width="54"
                        Margin="0 0 6 0"
                        />
                    <Rectangle
                        Width="3"
                        Fill="{DynamicResource GrayColorBrush}"
                        Margin="0 0 6 0"                        
                        />
                    <CheckBox 
                        Content="Authors"
                        IsChecked="{
                            Binding Columns, 
                            Converter={StaticResource CheckToList}, 
                            ConverterParameter='Authors'}" 
                        Style="{StaticResource FlatCheckbox}"
                        Margin="0 0 8 0" 
                        />
                    <CheckBox 
                        Content="Keywords"
                        Style="{StaticResource FlatCheckbox}"
                        Margin="0 0 8 0" 
                        IsChecked="{
                            Binding Columns, 
                            Converter={StaticResource CheckToList}, 
                            ConverterParameter='Keywords'}" 
                        />
                    <CheckBox 
                        Content="Year" 
                        Style="{StaticResource FlatCheckbox}" 
                        Margin="0 0 8 0" 
                        IsChecked="{
                            Binding Columns, 
                            Converter={StaticResource CheckToList}, 
                            ConverterParameter='Year'}" 
                        />
                    <CheckBox 
                        Content="Comment" 
                        Style="{StaticResource FlatCheckbox}"
                        Margin="0 0 8 0" 
                        IsChecked="{
                            Binding Columns, 
                            Converter={StaticResource CheckToList}, 
                            ConverterParameter='PersonalComment'}" 
                        />
                    <CheckBox 
                        Content="SIC" 
                        Style="{StaticResource FlatCheckbox}"
                        IsChecked="{
                            Binding Columns, 
                            Converter={StaticResource CheckToList}, 
                            ConverterParameter='SIC'}" 
                        />
                </StackPanel>
            </TabItem>
            <!-- Export -->
            <TabItem Header="Export">
                <usercontrols:PendingButton
                    StartText="Export article PDFs"
                    PendingText="Check articles you want to export..."
                    ActionText="Export selected"
                    IsPending="{
                        Binding Columns,
                        Converter={StaticResource CheckToList},
                        ConverterParameter='Export'}"
                    CanRunAction="{Binding CanExportP}"
                    InitialCommand="{Binding EnableExportCommand}"
                    ActionCommand="{Binding ExportCommand}"
                    CancelCommand="{Binding EnableExportCommand}"
                    HorizontalAlignment="left"
                    VerticalAlignment="Center"
                    Grid.Column="2"
                    />
            </TabItem>
        </TabControl>
        
        <!-- Datagrid -->
        <!-- Each column is bound to command from ArticleGrid style for sorting -->
        <DataGrid 
            x:Name="myGrid"
            Style="{StaticResource ArticleGrid}"
            FontSize="{Binding Source={x:Static properties:Settings.Default}, Path=FontSize}"
            ItemsSource="{Binding Articles}"
            SelectedItem="{Binding SelectedArticle}"
            VirtualizingStackPanel.VirtualizationMode="Standard"
            ScrollViewer.CanContentScroll="False"
            CanUserSortColumns="{Binding CanSortColumns}"
            Grid.Row="2"
            >
            <DataGrid.CellStyle>
                <Style TargetType="{x:Type DataGridCell}">
                    <Setter Property="Padding" Value="10" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter VerticalAlignment="Stretch" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource BlackColorAltBrush}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                    <!-- We set these items' commands from code behind -->
                    <MenuItem Header="Add comment/SIC" IsEnabled="{Binding CanAddPersonal}" Command="{Binding OpenAddPersonalCommand}" />
                    <MenuItem Header="Edit record" IsEnabled="{Binding User.IsAdmin}" Command="{Binding OpenEditCommand}" />
                    <MenuItem Header="Delete record" IsEnabled="{Binding User.IsAdmin}" Command="{Binding DeleteArticleCommand}" />
                    <MenuItem Command="{Binding OpenBookmarkManagerCommand}" CommandParameter="{Binding SelectedArticle}">
                        <MenuItem.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="70" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Bookmark" Grid.Column="0" />
                                <TextBlock Text="Ctrl+B" Grid.Column="2" />
                            </Grid>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem IsEnabled="{Binding User.IsAdmin}" Command="{Binding OpenReferenceManagerCommand}" CommandParameter="{Binding SelectedArticle}">
                        <MenuItem.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="70" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Reference" Grid.Column="0" />
                                <TextBlock Text="Ctrl+R" Grid.Column="2" />
                            </Grid>
                        </MenuItem.Header>
                    </MenuItem>
                    <MenuItem Command="{Binding CopyTitleCommand}" CommandParameter="{Binding SelectedArticle}">
                        <MenuItem.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="70" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="Copy Title" Grid.Column="0" />
                                <TextBlock Text="Ctrl+C" Grid.Column="2" />
                            </Grid>
                        </MenuItem.Header>
                    </MenuItem>
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick" Command="{Binding OpenFileCommand}" CommandParameter="{Binding SelectedArticle}" />
                <KeyBinding Modifiers="Ctrl" Key="C" Command="{Binding CopyTitleCommand}" CommandParameter="{Binding SelectedArticle}" />
            </DataGrid.InputBindings>
            <!-- Data grid columns -->
            <DataGrid.Columns>
                <!-- Title column -->
                <DataGridTemplateColumn 
                    Header="Title" 
                    Width="*" 
                    SortMemberPath="Title"
                    >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- Animations -->
                            <DataTemplate.Resources>
                                <Storyboard x:Key="ShowAbstract">
                                    <!-- Show Abstract -->
                                    <DoubleAnimation              
                                        Storyboard.TargetName="AbstractWrapper"
                                        Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                        From="0"
                                        To="1"
                                        Duration="0:0:0.15"
                                        />
                                </Storyboard>
                                <!-- Hide abstract -->
                                <Storyboard x:Key="HideAbstract">
                                    <DoubleAnimation
                                        Storyboard.TargetName="AbstractWrapper"
                                        Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                        From="1"
                                        To="0"
                                        Duration="0:0:0.15"
                                        />
                                </Storyboard>
                                <!-- Rotate arrow -->
                                <Storyboard x:Key="RotateArrow">
                                    <DoubleAnimation 
                                            Storyboard.TargetName="AbstractShowArrow"
                                            Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
                                            From="0"
                                            To="180"
                                            Duration="0:0:0.15"
                                            />
                                </Storyboard>
                                <!-- Reset arrow rotation -->
                                <Storyboard x:Key="ResetArrowRotation">
                                    <DoubleAnimation 
                                            Storyboard.TargetName="AbstractShowArrow"
                                            Storyboard.TargetProperty="RenderTransform.(RotateTransform.Angle)"
                                            From="180"
                                            To="0"
                                            Duration="0:0:0.15"
                                            />
                                </Storyboard>
                            </DataTemplate.Resources>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <!-- Title -->
                                <TextBlock 
                                    Text="{Binding Title}"
                                    Style="{Binding AbstractShown, Converter={StaticResource BoolToTextHeaderStyle}}"
                                    TextWrapping="Wrap"
                                    ap:TextBlockHighlighter.Selection="{Binding DataContext.FilterTitle, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                                    ap:TextBlockHighlighter.WordBreakMode="{Binding DataContext.WordBreakMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                                    ap:TextBlockHighlighter.HighlightColor="{StaticResource TextHighlightColorBrush}"
                                    ap:TextBlockHighlighter.Forecolor="#000000" 
                                    Grid.Column="0"
                                    Grid.Row="0"
                                    />
                                <!-- File contains only abstract label -->
                                <Border
                                    Visibility="{Binding AbstractOnly, Converter={StaticResource IntToVisibility}}"
                                    Padding="6 3 6 3"
                                    CornerRadius="6"
                                    Background="{StaticResource PrimaryColorBrush}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Bottom"
                                    Margin="0 0 -7 -7"
                                    Grid.Column="0"
                                    Grid.Row="0"
                                    >
                                    <TextBlock
                                        Text="AO"                                        
                                        Foreground="{StaticResource WhiteColorBrush}"
                                        FontSize="12"
                                        />
                                </Border>
                                <!-- Show/Hide abstract button -->
                                <ToggleButton
                                    IsChecked="{Binding AbstractShown, UpdateSourceTrigger=PropertyChanged}"
                                    Visibility="{Binding AbstractBody, Converter={StaticResource EmptyStringToVisibility}}"                                    
                                    Style="{x:Null}"
                                    Foreground="{StaticResource PrimaryColorBrush}"
                                    Cursor="Hand"
                                    VerticalAlignment="Top"
                                    Margin="6 0 0 0"
                                    Grid.Column="1"
                                    Grid.Row="0"
                                    >
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border
                                                BorderThickness="1 1 1 1"
                                                BorderBrush="{StaticResource PrimaryColorBrush}"                                                
                                                CornerRadius="6"
                                                Background="Transparent"
                                                Padding="6 6 6 6"
                                                >
                                                <ContentPresenter />
                                            </Border>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <ToggleButton.Content>
                                        <materialDesign:PackIcon 
                                            x:Name="AbstractShowArrow"
                                            Kind="ArrowDown"                                            
                                            Height="14"
                                            Width="14"
                                            >
                                            <materialDesign:PackIcon.RenderTransform>
                                                <RotateTransform 
                                                    Angle="0" 
                                                    CenterX="7" 
                                                    CenterY="7" 
                                                    />
                                            </materialDesign:PackIcon.RenderTransform>
                                        </materialDesign:PackIcon>
                                    </ToggleButton.Content>
                                    <ToggleButton.Triggers>
                                        <EventTrigger RoutedEvent="ToggleButton.Checked">
                                            <BeginStoryboard Storyboard="{StaticResource ShowAbstract}" />
                                            <BeginStoryboard Storyboard="{StaticResource RotateArrow}" />
                                        </EventTrigger>
                                        <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                                            <BeginStoryboard Storyboard="{StaticResource HideAbstract}" />
                                            <BeginStoryboard Storyboard="{StaticResource ResetArrowRotation}" />
                                        </EventTrigger>
                                    </ToggleButton.Triggers>
                                </ToggleButton>
                                <!-- Abstract body -->
                                <Border
                                    x:Name="AbstractWrapper"
                                    Visibility="{Binding AbstractShown, Converter={StaticResource BoolToVisibility}}"
                                    Margin="0 6 0 0"
                                    Grid.Column="0"
                                    Grid.ColumnSpan="2"
                                    Grid.Row="1"
                                    >
                                    <Border.RenderTransform>
                                        <ScaleTransform ScaleY="0" />
                                    </Border.RenderTransform>
                                    <TextBlock
                                        Text="{Binding AbstractBody}"
                                        TextWrapping="Wrap"
                                        TextAlignment="Justify"
                                        Grid.Row="1"
                                        />
                                </Border>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Authors column -->
                <DataGridTemplateColumn Header="Authors" Width="0.5*" Visibility="{Binding DataContext.Columns, Source={StaticResource ProxyElement}, Converter={StaticResource ListToVisibility}, ConverterParameter='Authors'}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Authors}" 
                                TextWrapping="Wrap"
                                ap:TextBlockHighlighter.Selection="{Binding DataContext.AuthorHighlight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                                ap:TextBlockHighlighter.WordBreakMode="True"
                                ap:TextBlockHighlighter.HighlightColor="{StaticResource TextHighlightColorBrush}"
                                ap:TextBlockHighlighter.Forecolor="#000000" 
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Keywords column -->
                <DataGridTemplateColumn Header="Keywords" Width="0.5*" Visibility="{Binding DataContext.Columns, Source={StaticResource ProxyElement}, Converter={StaticResource ListToVisibility}, ConverterParameter='Keywords'}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{Binding Keywords}" 
                                TextWrapping="Wrap"
                                ap:TextBlockHighlighter.Selection="{Binding DataContext.KeywordHighlight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                                ap:TextBlockHighlighter.WordBreakMode="True"
                                ap:TextBlockHighlighter.HighlightColor="{StaticResource TextHighlightColorBrush}"
                                ap:TextBlockHighlighter.Forecolor="#000000" 
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Year column -->
                <DataGridTemplateColumn 
                    Header="Year" 
                    SortMemberPath="Year" 
                    MinWidth="80" 
                    Width="Auto" 
                    Visibility="{
                        Binding DataContext.Columns, 
                        Source={StaticResource ProxyElement}, 
                        Converter={StaticResource ListToVisibility}, 
                        ConverterParameter='Year'}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Year}" TextWrapping="Wrap" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- File column -->
                <DataGridTemplateColumn Header="FileName" SortMemberPath="FileName" MinWidth="95" Width="Auto" Visibility="{Binding DataContext.Columns, Source={StaticResource ProxyElement}, Converter={StaticResource ListToVisibility}, ConverterParameter='FileName'}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding FileName}" TextWrapping="Wrap" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Comment column -->
                <DataGridTemplateColumn 
                    Header="Comment" 
                    SortMemberPath="PersonalComment" 
                    Width="0.4*" 
                    Visibility="{
                        Binding DataContext.Columns, 
                        Source={StaticResource ProxyElement}, 
                        Converter={StaticResource ListToVisibility}, 
                        ConverterParameter='PersonalComment'}"
                    >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding PersonalComment}" TextWrapping="Wrap" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- SIC column -->
                <DataGridTemplateColumn 
                    Header="SIC" 
                    SortMemberPath="SIC" 
                    MinWidth="70" 
                    Width="Auto" 
                    Visibility="{
                        Binding DataContext.Columns, 
                        Source={StaticResource ProxyElement}, 
                        Converter={StaticResource ListToVisibility}, 
                        ConverterParameter='SIC'}"
                    >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding SIC, Converter={StaticResource NumberToSIC}}" TextWrapping="Wrap" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Export column -->
                <DataGridTemplateColumn 
                    Header="Export"
                    MinWidth="78"
                    Width="Auto"
                    Visibility="{
                        Binding DataContext.Columns, 
                        Source={StaticResource ProxyElement}, 
                        Converter={StaticResource ListToVisibility}, 
                        ConverterParameter='Export'}">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="{x:Type DataGridCell}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                            <ContentPresenter Margin="10 0 0 0" VerticalAlignment="Stretch" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox
                                IsChecked="{Binding Path=Checked, UpdateSourceTrigger=PropertyChanged}" 
                                Command="{
                                    Binding DataContext.UpdateExportStatusCommand,
                                    RelativeSource={RelativeSource FindAncestor, 
                                    AncestorType={x:Type UserControl}}}"
                                Style="{StaticResource FlatCheckbox}"
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!-- Mass bookmark column -->
                <DataGridTemplateColumn Header="Bookmark" Width="Auto" Visibility="{Binding DataContext.Columns, Source={StaticResource ProxyElement}, Converter={StaticResource ListToVisibility}, ConverterParameter='Bookmark'}">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="{x:Type DataGridCell}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                            <ContentPresenter Margin="10 0 0 0" VerticalAlignment="Stretch" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox 
                                IsChecked="{
                                    Binding Path=BMChecked, 
                                        UpdateSourceTrigger=PropertyChanged}" 
                                />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        
        <notifications:NotificationArea 
            x:Name="DataViewNotificationArea" 
            Position="BottomRight" 
            MaxItems="3"
            Margin="0 0 0 6"
            Grid.Row="1"
            Grid.RowSpan="2"
            />
        
        <!-- Bottom menu -->
        <Border
            BorderThickness="0 1 0 0"
            BorderBrush="{StaticResource GrayColorBrush}"
            Padding="12 6 12 6"
            Grid.Row="3"
            >
            <Grid>
                <Grid.ColumnDefinitions>
                    <!-- Pagination column -->
                    <ColumnDefinition Width="Auto" />
                    <!-- Items per page column -->
                    <ColumnDefinition Width="Auto" />
                    <!-- Export column -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <!-- Pagination -->
                <StackPanel
                    Visibility="{
                        Binding IsThereAnyPages, 
                        Converter={StaticResource BoolToVisibility}, 
                        ConverterParameter=Soft}"
                    Orientation="Horizontal"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Grid.Column="0"
                    >
                    <Button 
                        Content="Previous" 
                        Command="{Binding PreviousPageCommand}"
                        Style="{StaticResource PaginationButton__Left}"
                        />
                    <ListBox
                        ItemsSource="{Binding PageButtons}"
                        SelectedItem="{Binding SelectedPage}"
                        Style="{StaticResource PaginationWrapper}"
                        />
                    <Button 
                        Content="Next" 
                        Command="{Binding NextPageCommand}"
                        Style="{StaticResource PaginationButton__Right}"
                        />
                </StackPanel>
            </Grid>
        </Border>
    </Grid>
</UserControl>
